#+property: header-args :tangle init.el
* Emacs Config

** Startup settings

These settings are important enough that they must be loaded first.

*** Straight

Straight is a lock file based package manager for installing packages.

#+begin_src emacs-lisp
  ;; bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;;; setup straight use-package
  (straight-use-package 'use-package)
#+end_src

*** Exec PATH from shell

This package solves the issue on macos where src_emacs-lisp[:tangle no]{exec-path} isn't set based off of the shell which causes many issues.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :if (memq window-system '(mac))
    :config
    (exec-path-from-shell-initialize))
#+end_src

*** Catppuccin theme

#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :straight t
    :config
    (load-theme 'catppuccin :no-confirm))
#+end_src

** Emacs Settings

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (tab-always-indent 'complete)
    (text-mode-ispell-word-completion nil)
    (read-extended-command-predicate #'command-completion-default-include-p)
    :hook
    (prog-mode . (lambda ()
                   (setq display-line-numbers 'relative)))
    :init
    (set-face-attribute 'default nil :font "Monaspace Argon" :height 160))
#+end_src

*** General functions

#+begin_src emacs-lisp
  (setq me/config-org-file (expand-file-name (file-name-concat user-emacs-directory "init.org")))
  (setq me/config-file (expand-file-name (file-name-concat user-emacs-directory "init.el")))

  (defun me/edit-config ()
    "Open the literate config file for editing"
    (interactive)
    (find-file me/config-org-file))

  (defun me/reload-config ()
    "Reload the config file to reflect changes (mostly)"
    (interactive)
    (load-file me/config-file))
#+end_src

*** Auto Tangle

This snippet auto tangles the code from this org file into my init file.

#+begin_src emacs-lisp
  (defun me/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        me/config-org-file)
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'me/org-babel-tangle-config)))
#+end_src

** Editing

*** Vim Bindings

Evil is a package that adds vim bindings to emacs to give you the best of both worlds

#+begin_src emacs-lisp
  ;; dirty vim user
  (use-package evil
    :straight t
    :custom
    (evil-undo-system 'undo-redo)
    (evil-want-C-u-delete t)
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-respect-visual-line-mode t)
    :config
    (evil-mode t))
#+end_src

*** Parinfer

[[https://shaunlebron.github.io/parinfer/][Parinfer]] is a concept for editing lisp code that allows you to mostly not think about it, turning the editing style into more of an indentation-based 

#+begin_src emacs-lisp
  (use-package parinfer-rust-mode
    :straight t
    :custom
    (parinfer-rust-disable-troublesome-modes t)
    :hook (emacs-lisp-mode lisp-mode))
#+end_src

*** Completion

Completion is a mess in emacs, there are so many frameworks and opinions about them.

Orderless is a shoe in because it just enhances emacs minibuffer sorting.

#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

Vertico is for minibuffer completion (the line/window at the bottom of the screen).

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :config
    (vertico-mode))
#+end_src

Marginalia adds helpful metadata to the vertico completion such as docstrings and function call patterns.

#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
#+end_src

Corfu is for popup completion for regular text editing

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :init
    (global-corfu-mode))

  (use-package corfu-terminal
    :straight t
    :after corfu
    :if (not (display-graphic-p))
    :init (corfu-terminal-mode t))
#+end_src

